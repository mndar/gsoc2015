Title: RootFS Build Factory for CentOS

Problem Statement: 
Once CentOS for ARM is released, board vendors will want to release custom images.
Every vendor will have their kernel,firmware & bootloader that they would want to
integrate into images. I would like to work on a set of tools & scripts that makes
generation of such images easy. Available tools like ImageFactory presently focus
mainly on VM & cloud images. For handling the nitty-gritty of ARM systems I propose
development of a set of yum plugins & tools, either separately or with ImageFactory.

Name: Mandar Joshi
Email Address: emailmandar at gmail.com
Phone: <Phone Number Here>
Freenode IRC Nick: mndar
Location (City, Country and/or Time Zone): Mumbai, India (UTC/GMT +5:30 hours)

Motivation: My first choice for a server is CentOS as it is the top stable 
Linux server distribution and is very well accepted in any production 
environment. I would like to see CentOS building the same reputation in 
Embedded Linux systems.

Tools/Programming Languages: Python, Bash Scripts
Tools I use: GEdit when X11 is available. nano otherwise

Concept: 
+ Use x86/x86_64 to build ARM RootFS. This approach has  worked in the past. 
  msalter from redhat did this in 2009. 
  https://www.redhat.com/archives/fedora-buildsys-list/2009-July/msg00000.html
+ With a Yum plugin alter Yum's behavior while installing kernel updates for 
  ARM systems to make sure the system stays bootable after a kernel upgrade.
+ Having a simple GUI would reduce the effort required by vendors. This will
  make it easier for vendors to supply CentOS images with their boards.
+ It should be possible to generate rootfs on non-ARM system. My reasons for 
  saying so are
    - System builders may not always have access to good performance ARM boards. 
    - Also, vendors should not need a supported board fo building a rootfs for 
      their board. QEMU is just too slow for any development work.
    - Moreover, Intel i7s or equivalent (x86, x86_64) are going to be faster 
      for general purpose computing than most ARM boards out there.

Main Features:
+ Generates Rootfs based on template. Templates are created by board
  vendors specifying configuration for bootloader, packages to be installed, 
  kernel version.
+ Yum plugin allowing you to create ARM rootfs on x86/x86_64. Downloads and 
  installs rpms from ARM repo instead of x86/x86_64 repo. Installs rpms to
  new root specified in the template file.
+ Has configuration options specifying path to firmware, ramfs and kernel.
+ User specifies packages to install in template file. The Build Factory resolves
  dependencies automatically.
+ Has an option whether to use Vanilla Kernel (some board vendors might have a 
  custom kernel)/Use Stock Kernel/SPEC file.
+ Specify path to Cross Compiler in case you don't want to use the stock kernel
  and want the Build Factory to compile the kernel for you.
+ Write image to SD Card.
+ Template file specifies path to U-Boot/Vivi/Other Bootloader binary.
+ Template file specifies image format (jffs2,squashfs,cramfs,raw etc.)
+ Option to specify overlay etc path containing /etc/<config> files for system 
  and packages
+ Yum plugin to make sure kernel updates don't make system unbootable. The 
  plugin uses a script to perform the final special steps for each rootfs. 
  Which script to use will depend on the board template.

Sample Board Template (XML): This is what a board template would roughly resemble.

<image>
	<type>jffs2</type>
	<outputdirectory>/home/vendor/image/</outputdirectory>
</image>

<kernel>
	<srcpath>/opt/vendor/src/kernel3/</srcpath>
	<kernelconfig>/opt/vendor/src/kernel3/.config</kernelconfig>
	<kernelmodules>/opt/vendor/src/kernel3/modules<kernelmodules>
	<crosscompiler>/opt/vendor/bin/armv7a-hardfloat-linux-gnueabi-</crosscompiler>
	<appendparameters>console=ttyAMA0,115200n8 rw root=/dev/mmcblk0p3</appendparameters>
	<initrdpath>/opt/vendor/srsc/initrd3/initrd.img</initrdpath>
	<bootloader>/path/to/bootloaderbinary.bin</bootloader>
</kernel>

<packages>
	<group>Base</group>
	<package>xorg-x11</package>
</packages>

<config>
	<rootpass>secret</rootpass>
	<hostname>centosarmv7</hostname>
	<network>		
		<ipaddress>192.168.1.200/24</ipaddress>
		<subnetmask>255.255.255.0</subnetmask>
		<gateway>192.168.1.1</gateway>
	</network>
	<overlayetcpath>/opt/vendor/src/etc/</overlayetcpath>
	<finalizescript>/opt/vendor/src/scripts/finalize.sh</finalizescript>
</config>

Assumptions:
+ CentOS for ARMv7 will be ready by the time testing for Rootfs Build Factory 
  begins.
+ Alternatively build a bare minimum CentOS ARM system during the GSoC project.

Timeline:
+ In the community bonding period and till June 7 (that is when my semester 
  exams tentatively end)
  - Get familiar with details of Yum, Mock, Koji & ImageFactory. Learn how to
    write simple plugins.
  - Acquire couple of ARM development boards

Target 1: CentOS for ARM (1 week if CentOS for ARM is available, 3-4 weeks 
          otherwise)
+ If CentOS for ARMv7 is not available by the time we need it, 
  - Work on doing a bootstrap using the method followed by Fedora 
    https://fedoraproject.org/wiki/Architectures/AArch64/Bootstrap.
  - Alternatively use the cross compile approach to first compile 
    @buildsys-build.
  - Write Mock, Koji plugins to handle cross compiles. Base it on msalter's 
    work 
    https://www.redhat.com/archives/fedora-buildsys-list/2009-July/msg00000.html
+ Setup Local CentOS Repository for faster downloading of pacakges.

Target 2: Yum Plugin (2 Weeks)
+ Write Yum plugin to download packages for non host architectures 
  eg. downloading ARMv7 packages on a x86_64 host.

Target 3: Scripting (1 week)
+ Finalize board template XML format and write a parser for it.
+ Script calculates and displays summary of operations that will be performed
  with the provided template.
  
For the Mid Term evaluation deadline of 3 July (tentatively before 30th June),
the Yum plugin for download packages for non host architectures and parser for
board template XML files should be ready. This is assuming we don't have to
build CentOS for ARM in the coding period otherwise only a bare minimum CentOS
port for ARM will be ready.

Target 4: Scripts to install packages & config files to new root (1 week)
+ Write Python/Yum/Bash scripts to install packages to custom root partition.
+ Come up with reliable ways to copy an overlay etc directory to new rootfs.
  (or we could just force copy it overwriting the default config files)

Target 5: Convert rootfs to bootable image (1 week)
+ Write scripts to make rootfs bootable for each of the available boards. The
  information for these scripts(kernel modules,firmware, bootloader) will be 
  read from the board template.
+ Generate Image for QEMU,Cubie Board, Raspberry Pi, other available boards.
  Test them.

Target 6: Yum Plugin to handle kernel updates (2 Weeks)
+ Yum plugin to make sure kernel updates don't make system unbootable.

There will be no more/very little time left for the below targets if CentOS for
ARM is built during the coding period.

Target 7: Misc Features & GUI (2 weeks)
+ Kernel compilation using crosscompiler & config specified in board template.
+ Add feature to write rootfs image to sd card. Any custom actions (eg.
  partitions) will be read from the board template. Modify parser for this.
+ Build GUI using PyGTK.

By 17 August, the above targets will be completed.

Target 8: Testing (1 week)
+ Write Tests.
+ Documentation
+ Write Wiki Page for supported boards.
+ Write Tutorial for using the RootFS Build Factory.

Time Dedicated to GSoC:  
+ 50 hours a week (more if possible) till July 15. My next semester at college 
  starts around July 15.
  Might need couple of days off in between to handle some paper work at college
+ 25 hours a week after that. Working hours will depend on my lecture schedule.

Available Resources:
+ 3 x86/x86_64 machines
  - Intel i7 4770, 16GB RAM
  - Intel Core 2 Duo, 4GB RAM
  - Intel Atom 512 MB RAM (for testing)
+ Internet Connectivity from 2 ISPs to make sure I'm always online.
+ 1 Openmoko Freerunner ARMv4TL 400MHz Processor (incase we are able to get a 
  armv4tl compiler to build CentOS)
+ Will purchase Cubie Board and/or Raspberry Pi or other preferred boards (will
  decide after discussion with my mentor) if my proposal is accepted.

About Me:
My primary area of interest is Linux and my programming languages of choice are
C and Python. As part of my academics I have studied C, C++, Data Structures, 
Computer Networks, Software Engineering, Object Oriented Analysis and Design, 
Microcontrollers, Image Processing, Operating Systems and Database Systems to 
name a few. I am presently in my third year of college. I have work experience 
as a software developer and as a system admin. As a software developer I worked
on a wide range of projects ranging from development of system services using 
Microsoft .NET, Networking services to Embedded Linux and Point-Of-Sale 
terminals along with Smart Cards.
I have used numerous open source libraries under Linux including GTK+, Clutter,
Qt, Curl, BlueZ, FLTK, Gstreamer and worked with few databases (MySQL, MS SQL, 
Oracle, SQLite). I've also done development using Python(Twisted) and some web 
development using Django, PHP, Ruby, Javascript. I have vast experience in 
installing and configuring various Linux distributions including Gentoo,Fedora,
Cent OS, Debian,Knoppix,Ubuntu. I have also contributed couple of patches to 
the Linux kernel (ALSA Project) to add support for a volume knob and LED for a 
USB sound card.
Details of the projects I've worked on are here
http://mndar.phpnet.us/resume or http://mndar.github.io/resume/
In my free time I like to drive, listen to music and enjoy configuring/fixing
computers.

Opensource Contributions:
Couple of patches to the Linux kernel (ALSA Project) to add support for a 
volume knob and LED for a USB sound card. 
[1] http://mailman.alsa-project.org/pipermail/alsa-devel/2010-October/033100.html
[2] http://mailman.alsa-project.org/pipermail/alsa-devel/2010-November/033300.html

Why I am the right person for the job:
I have been an enthusiastic Linux user for the past 10 years. Starting out 
with simpler distributions and configurations and advancing to embedded systems
and more difficult ones over the years. I am a hands on person and very 
passinate about the task I take up. I have gained valuable work experience in 
the Linux domain and this will help me in the GSoC project by reducing the time
I need to adjust to a work like environment. I have worked on projects locally
as well as remotely. When I was part of a team to do feasibility study for a 
VoIP system, I worked remotely with the project leader. I was in Mumbai,India 
and the project leader was in Tokyo,Japan. That is why I feel I can code an 
excellent project if given this opportunity.

Please feel free to contact me anytime via email or phone if you need any 
clarifications on the approach I am proposing.
I look forward to hearing from you.

